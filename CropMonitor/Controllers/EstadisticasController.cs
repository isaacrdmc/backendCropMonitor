using CropMonitor.Data;
using CropMonitor.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Security.Claims;

namespace CropMonitor.Controllers
{
    [Authorize] // Secure the Estadisticas controller
    [Route("api/[controller]")]
    [ApiController]
    public class EstadisticasController : ControllerBase
    {
        private readonly CropMonitorContext _context;

        public EstadisticasController(CropMonitorContext context)
        {
            _context = context;
        }

        // GET: api/Estadisticas
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Estadistica>>> GetEstadisticas()
        {
            // Admins can see all statistics. Owners can only see statistics from their modules.
            if (User.IsInRole("Administrador"))
            {
                return await _context.Estadisticas.Include(e => e.Modulo).ToListAsync();
            }
            else
            {
                var userId = int.Parse(User.FindFirst(ClaimTypes.NameIdentifier)?.Value);
                var ownedModuleIds = await _context.VentaModulos
                                                .Where(vm => vm.IdUsuario == userId)
                                                .Select(vm => vm.IdModulo)
                                                .ToListAsync();

                return await _context.Estadisticas
                    .Include(e => e.Modulo)
                    .Where(e => ownedModuleIds.Contains(e.IdModulo))
                    .ToListAsync();
            }
        }

        // GET: api/Estadisticas/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Estadistica>> GetEstadistica(int id)
        {
            var estadistica = await _context.Estadisticas.Include(e => e.Modulo).FirstOrDefaultAsync(e => e.IdEstadistica == id);

            if (estadistica == null)
            {
                return NotFound();
            }

            // Authorization check: Ensure the user owns this statistic's module or is an admin.
            if (!User.IsInRole("Administrador"))
            {
                var userId = int.Parse(User.FindFirst(ClaimTypes.NameIdentifier)?.Value);
                var isOwnedModule = await _context.VentaModulos.AnyAsync(vm => vm.IdModulo == estadistica.IdModulo && vm.IdUsuario == userId);
                if (!isOwnedModule)
                {
                    return Forbid("You are not authorized to view this statistic.");
                }
            }

            return estadistica;
        }

        // POST: api/Estadisticas
        // Typically, statistics are generated by modules, not directly via an API for users.
        // This endpoint might be used by the physical modules themselves or an admin.
        [HttpPost]
        [Authorize(Roles = "Administrador")] // Or consider allowing modules to post securely (e.g., API Key)
        public async Task<ActionResult<Estadistica>> PostEstadistica(Estadistica estadistica)
        {
            // Validate that the Modulo exists
            var moduloExists = await _context.Modulos.AnyAsync(m => m.IdModulo == estadistica.IdModulo);
            if (!moduloExists)
            {
                return BadRequest("The specified Modulo does not exist.");
            }

            _context.Estadisticas.Add(estadistica);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetEstadistica", new { id = estadistica.IdEstadistica }, estadistica);
        }

        // PUT and DELETE for Estadisticas are less common for a typical monitoring app,
        // as statistics are historical data. However, if needed for admin purposes:

        // PUT: api/Estadisticas/5
        [HttpPut("{id}")]
        [Authorize(Roles = "Administrador")] // Only Admins can update statistics
        public async Task<IActionResult> PutEstadistica(int id, Estadistica estadistica)
        {
            if (id != estadistica.IdEstadistica)
            {
                return BadRequest();
            }

            _context.Entry(estadistica).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!EstadisticaExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // DELETE: api/Estadisticas/5
        [HttpDelete("{id}")]
        [Authorize(Roles = "Administrador")] // Only Admins can delete statistics
        public async Task<IActionResult> DeleteEstadistica(int id)
        {
            var estadistica = await _context.Estadisticas.FindAsync(id);
            if (estadistica == null)
            {
                return NotFound();
            }

            _context.Estadisticas.Remove(estadistica);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool EstadisticaExists(int id)
        {
            return _context.Estadisticas.Any(e => e.IdEstadistica == id);
        }
    }
}