// <auto-generated />
using System;
using CropMonitor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CropMonitor.Migrations
{
    [DbContext(typeof(CropMonitorContext))]
    partial class CropMonitorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CropMonitor.Models.Comentario", b =>
                {
                    b.Property<int>("IdComentario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdComentario"));

                    b.Property<string>("ComentarioTexto")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("Comentario");

                    b.Property<DateTime>("FechaComentario")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<int>("MeGusta")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdComentario");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("CropMonitor.Models.Estadistica", b =>
                {
                    b.Property<int>("IdEstadistica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstadistica"));

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdModulo")
                        .HasColumnType("int");

                    b.Property<decimal?>("NivelAgua")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("ValorHumedad")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("ValorLuz")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("ValorTemperatura")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("IdEstadistica");

                    b.HasIndex("IdModulo");

                    b.ToTable("Estadisticas");
                });

            modelBuilder.Entity("CropMonitor.Models.Guia", b =>
                {
                    b.Property<int>("IdGuia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGuia"));

                    b.Property<string>("CuidadoPlanta")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("EstacionPlanta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NotasPlantas")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("TipoPlanta")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdGuia");

                    b.ToTable("Guias");
                });

            modelBuilder.Entity("CropMonitor.Models.Modulo", b =>
                {
                    b.Property<int>("IdModulo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdModulo"));

                    b.Property<string>("CodigoModulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Costo")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("TipoModulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdModulo");

                    b.HasIndex("CodigoModulo")
                        .IsUnique();

                    b.ToTable("Modulos");
                });

            modelBuilder.Entity("CropMonitor.Models.Planta", b =>
                {
                    b.Property<int>("IdPlanta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlanta"));

                    b.Property<bool>("Favorito")
                        .HasColumnType("bit");

                    b.Property<string>("FotoPlanta")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("IdModulo")
                        .HasColumnType("int");

                    b.Property<string>("NombrePlanta")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TipoPlanta")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UsoPlanta")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdPlanta");

                    b.HasIndex("IdModulo")
                        .IsUnique()
                        .HasFilter("[IdModulo] IS NOT NULL");

                    b.ToTable("Plantas");
                });

            modelBuilder.Entity("CropMonitor.Models.Sensor", b =>
                {
                    b.Property<int>("IdSensor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSensor"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("IdModulo")
                        .HasColumnType("int");

                    b.Property<string>("NombreSensor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("RangoMax")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("RangoMin")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("TipoSensor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdSensor");

                    b.HasIndex("IdModulo");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("CropMonitor.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdUsuario");

                    b.HasIndex("Correo")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("CropMonitor.Models.VentaModulo", b =>
                {
                    b.Property<int>("IdVentas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVentas"));

                    b.Property<int>("CantidadVenta")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaVenta")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdModulo")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalVenta")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("IdVentas");

                    b.HasIndex("IdModulo")
                        .IsUnique();

                    b.HasIndex("IdUsuario");

                    b.ToTable("VentaModulos");
                });

            modelBuilder.Entity("CropMonitor.Models.Comentario", b =>
                {
                    b.HasOne("CropMonitor.Models.Usuario", "Usuario")
                        .WithMany("Comentarios")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CropMonitor.Models.Estadistica", b =>
                {
                    b.HasOne("CropMonitor.Models.Modulo", "Modulo")
                        .WithMany("Estadisticas")
                        .HasForeignKey("IdModulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modulo");
                });

            modelBuilder.Entity("CropMonitor.Models.Planta", b =>
                {
                    b.HasOne("CropMonitor.Models.Modulo", "Modulo")
                        .WithOne("Planta")
                        .HasForeignKey("CropMonitor.Models.Planta", "IdModulo");

                    b.Navigation("Modulo");
                });

            modelBuilder.Entity("CropMonitor.Models.Sensor", b =>
                {
                    b.HasOne("CropMonitor.Models.Modulo", "Modulo")
                        .WithMany()
                        .HasForeignKey("IdModulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modulo");
                });

            modelBuilder.Entity("CropMonitor.Models.VentaModulo", b =>
                {
                    b.HasOne("CropMonitor.Models.Modulo", "Modulo")
                        .WithOne("VentaModulo")
                        .HasForeignKey("CropMonitor.Models.VentaModulo", "IdModulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CropMonitor.Models.Usuario", "Usuario")
                        .WithMany("VentaModulos")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modulo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CropMonitor.Models.Modulo", b =>
                {
                    b.Navigation("Estadisticas");

                    b.Navigation("Planta")
                        .IsRequired();

                    b.Navigation("VentaModulo")
                        .IsRequired();
                });

            modelBuilder.Entity("CropMonitor.Models.Usuario", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("VentaModulos");
                });
#pragma warning restore 612, 618
        }
    }
}
