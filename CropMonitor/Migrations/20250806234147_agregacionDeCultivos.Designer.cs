// <auto-generated />
using System;
using CropMonitor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CropMonitor.Migrations
{
    [DbContext(typeof(CropMonitorDbContext))]
    [Migration("20250806234147_agregacionDeCultivos")]
    partial class agregacionDeCultivos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CropMonitor.Models.AppMovil.ConfiguracionNotificacion", b =>
                {
                    b.Property<int>("ConfiguracionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConfiguracionID"));

                    b.Property<bool>("ActivarRiegoAutomatico")
                        .HasColumnType("bit");

                    b.Property<string>("FrecuenciaRiego")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("HabilitarRecomendacionesEstacionales")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("HorarioNotificacion")
                        .HasColumnType("time");

                    b.Property<string>("TipoAlertaSensor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("ConfiguracionID");

                    b.HasIndex("UsuarioID")
                        .IsUnique();

                    b.ToTable("ConfiguracionNotificaciones");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.Cultivo", b =>
                {
                    b.Property<int>("CultivoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CultivoID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagenURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RequisitosAgua")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RequisitosClima")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RequisitosLuz")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CultivoID");

                    b.ToTable("Cultivos");

                    b.HasData(
                        new
                        {
                            CultivoID = 1,
                            Descripcion = "Planta herbácea cultivada para la alimentación. Sus hojas se consumen frescas en ensaladas.",
                            ImagenURL = "https://www.guiadejardineria.com/wp-content/uploads/2016/07/cultiva-tus-lechugas-en-maceta-03.jpg",
                            Nombre = "Lechuga",
                            RequisitosAgua = "Riego frecuente, mantener el suelo húmedo",
                            RequisitosClima = "Clima fresco, 15-18°C",
                            RequisitosLuz = "Sol parcial"
                        },
                        new
                        {
                            CultivoID = 2,
                            Descripcion = "Hortaliza de hoja que crece rápido, ideal para consumo fresco o cocido.",
                            ImagenURL = "https://www.minutoar.com.ar/u/fotografias/m/2021/3/18/f768x1-50265_50392_110.jpg",
                            Nombre = "Espinaca",
                            RequisitosAgua = "Riego regular, evitar el encharcamiento",
                            RequisitosClima = "Clima fresco, 10-20°C",
                            RequisitosLuz = "Sol parcial o sombra"
                        },
                        new
                        {
                            CultivoID = 3,
                            Descripcion = "Planta de hojas grandes, muy nutritiva y resistente. Se usa en guisos y salteados.",
                            ImagenURL = "https://www.unhuertoenmibalcon.com/blog/wp-content/uploads/IMG_20130613_210642_web.jpg",
                            Nombre = "Acelga",
                            RequisitosAgua = "Riego abundante y constante",
                            RequisitosClima = "Amplia tolerancia, 10-25°C",
                            RequisitosLuz = "Sol directo o semisombra"
                        },
                        new
                        {
                            CultivoID = 4,
                            Descripcion = "Una de las hortalizas más nutritivas. Hojas rizadas, ideal para ensaladas o batidos.",
                            ImagenURL = "https://www.menudiet.es/images/blog/kale-la-col-rizada-americana.jpg",
                            Nombre = "Kale",
                            RequisitosAgua = "Riego regular",
                            RequisitosClima = "Clima fresco, resiste heladas",
                            RequisitosLuz = "Sol directo"
                        },
                        new
                        {
                            CultivoID = 5,
                            Descripcion = "Hierba de sabor picante y distintivo. Crece rápidamente, perfecta para ensaladas.",
                            ImagenURL = "https://graciasnaturaleza.com/wp-content/uploads/2022/05/plantar-rucula-d.jpg",
                            Nombre = "Rúcula",
                            RequisitosAgua = "Riego frecuente, evitar que el suelo se seque",
                            RequisitosClima = "Clima fresco a templado",
                            RequisitosLuz = "Sol completo"
                        },
                        new
                        {
                            CultivoID = 6,
                            Descripcion = "Variedad de tomate pequeña y dulce. Perfecta para cultivar en macetas en balcones y terrazas.",
                            ImagenURL = "https://huerto-en-casa.com/wp-content/uploads/2022/01/tomate-cherry-en-maceta.jpg",
                            Nombre = "Tomate cherry",
                            RequisitosAgua = "Riego abundante y constante, especialmente en verano",
                            RequisitosClima = "Clima cálido, 20-30°C",
                            RequisitosLuz = "Mucho sol"
                        },
                        new
                        {
                            CultivoID = 7,
                            Descripcion = "Planta que produce frutos dulces o picantes. Requiere mucho sol para fructificar.",
                            ImagenURL = "https://cdn.manomano.com/media/edison/4/7/1/6/47161050dc9c.jpg",
                            Nombre = "Pimiento",
                            RequisitosAgua = "Riego regular, sin encharcar",
                            RequisitosClima = "Clima cálido, 20-25°C",
                            RequisitosLuz = "Sol directo"
                        },
                        new
                        {
                            CultivoID = 8,
                            Descripcion = "Hortaliza que produce frutos alargados. Necesita espacio y un recipiente grande.",
                            ImagenURL = "https://cdn0.ecologiaverde.com/es/posts/4/5/7/cultivar_calabacin_en_maceta_754_orig.jpg",
                            Nombre = "Calabacín",
                            RequisitosAgua = "Riego muy abundante",
                            RequisitosClima = "Clima cálido, 18-24°C",
                            RequisitosLuz = "Sol directo"
                        },
                        new
                        {
                            CultivoID = 9,
                            Descripcion = "Pequeño fruto rojo y dulce. Se adapta bien a macetas colgantes o camas elevadas.",
                            ImagenURL = "https://thumbs.dreamstime.com/b/cierre-de-una-planta-fresa-con-jugosas-bayas-rojas-en-olla-terracota-ideal-para-la-jardiner%C3%ADa-el-hogar-comida-saludable-y-temas-385577850.jpg",
                            Nombre = "Fresa",
                            RequisitosAgua = "Riego regular, mantener el suelo húmedo",
                            RequisitosClima = "Templado, 15-25°C",
                            RequisitosLuz = "Sol completo"
                        },
                        new
                        {
                            CultivoID = 10,
                            Descripcion = "Fruto alargado, crujiente y refrescante. Requiere un tutor para trepar.",
                            ImagenURL = "https://www.imporalaska.com/uploads/products/2022/01/pic_1643299016_1643299058.jpg",
                            Nombre = "Pepino",
                            RequisitosAgua = "Riego muy abundante y constante",
                            RequisitosClima = "Clima cálido, 20-30°C",
                            RequisitosLuz = "Sol directo"
                        },
                        new
                        {
                            CultivoID = 11,
                            Descripcion = "Hierba aromática con hojas verdes y un sabor dulce y picante. Ideal para la cocina italiana.",
                            ImagenURL = "https://s1.elespanol.com/2015/06/11/cocinillas/cocinillas_40255977_116187896_425x640.jpg",
                            Nombre = "Albahaca",
                            RequisitosAgua = "Riego moderado, sin mojar las hojas",
                            RequisitosClima = "Clima cálido, sensible al frío",
                            RequisitosLuz = "Sol directo"
                        },
                        new
                        {
                            CultivoID = 12,
                            Descripcion = "Hierba muy fácil de cultivar y con un aroma refrescante. Se propaga rápidamente.",
                            ImagenURL = "https://www.launion.com.mx/images/2025/1600602ab00db37fdab66f3be0de1c98.jpg",
                            Nombre = "Menta",
                            RequisitosAgua = "Riego abundante",
                            RequisitosClima = "Clima templado, resiste el frío",
                            RequisitosLuz = "Sol parcial"
                        },
                        new
                        {
                            CultivoID = 13,
                            Descripcion = "Hierba aromática con hojas finas y un sabor fresco. Muy utilizada en la cocina.",
                            ImagenURL = "https://s1.elespanol.com/2021/07/07/actualidad/594701747_194475799_1706x960.jpg",
                            Nombre = "Perejil",
                            RequisitosAgua = "Riego regular, mantener la humedad",
                            RequisitosClima = "Clima templado",
                            RequisitosLuz = "Semisombra"
                        },
                        new
                        {
                            CultivoID = 14,
                            Descripcion = "Hierba de sabor intenso y fresco, común en la cocina latinoamericana y asiática.",
                            ImagenURL = "https://cdn0.uncomo.com/es/posts/0/3/7/como_sembrar_cilantro_27730_orig.jpg",
                            Nombre = "Cilantro",
                            RequisitosAgua = "Riego moderado",
                            RequisitosClima = "Clima templado a fresco",
                            RequisitosLuz = "Sol parcial"
                        },
                        new
                        {
                            CultivoID = 15,
                            Descripcion = "Arbusto aromático de hojas perennes. Muy resistente, ideal para principiantes.",
                            ImagenURL = "https://s1.elespanol.com/2015/07/22/cocinillas/cocinillas_50504957_116199069_1273x1280.jpg",
                            Nombre = "Romero",
                            RequisitosAgua = "Riego escaso, resiste sequía",
                            RequisitosClima = "Clima seco y cálido",
                            RequisitosLuz = "Sol directo"
                        });
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.CultivosTemporada", b =>
                {
                    b.Property<int>("CultivoID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("TemporadaID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("CultivoID", "TemporadaID");

                    b.HasIndex("TemporadaID");

                    b.ToTable("Cultivos_Temporadas");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.Favorito", b =>
                {
                    b.Property<int>("FavoritoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoritoID"));

                    b.Property<int>("CultivoID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAgregado")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("FavoritoID");

                    b.HasIndex("CultivoID");

                    b.HasIndex("UsuarioID");

                    b.HasIndex("UsuarioID", "CultivoID")
                        .IsUnique();

                    b.ToTable("Favoritos");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.LecturaSensor", b =>
                {
                    b.Property<int>("LecturaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LecturaID"));

                    b.Property<int>("SensorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("LecturaID");

                    b.HasIndex("SensorID", "Timestamp");

                    b.ToTable("LecturasSensores");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.Modulo", b =>
                {
                    b.Property<int>("ModuloID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuloID"));

                    b.Property<int?>("CantidadCultivosActual")
                        .HasColumnType("int");

                    b.Property<int?>("CantidadCultivosMax")
                        .HasColumnType("int");

                    b.Property<int?>("DiasEnFuncionamiento")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NombreModulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("ModuloID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Modulos");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.Notificacion", b =>
                {
                    b.Property<int>("NotificacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificacionID"));

                    b.Property<int?>("CultivoID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaHoraEnvio")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Leida")
                        .HasColumnType("bit");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SensorID")
                        .HasColumnType("int");

                    b.Property<string>("TipoNotificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("NotificacionID");

                    b.HasIndex("CultivoID");

                    b.HasIndex("SensorID");

                    b.HasIndex("UsuarioID", "Leida");

                    b.ToTable("Notificaciones");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.Receta", b =>
                {
                    b.Property<int>("RecetaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecetaID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instrucciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreReceta")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("RecetaID");

                    b.ToTable("Recetas");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.RecetasCultivo", b =>
                {
                    b.Property<int>("RecetaID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("CultivoID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("RecetaID", "CultivoID");

                    b.HasIndex("CultivoID");

                    b.ToTable("Recetas_Cultivos");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.Sensor", b =>
                {
                    b.Property<int>("SensorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SensorID"));

                    b.Property<int?>("CultivoID")
                        .HasColumnType("int");

                    b.Property<bool>("EsAcuaHidroponico")
                        .HasColumnType("bit");

                    b.Property<string>("EstadoRiego")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MedidorSlotIndex")
                        .HasColumnType("int");

                    b.Property<int>("ModuloID")
                        .HasColumnType("int");

                    b.Property<string>("TipoSensor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UltimaLectura")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnidadMedida")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("ValorLectura")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("SensorID");

                    b.HasIndex("CultivoID");

                    b.HasIndex("ModuloID");

                    b.ToTable("Sensores");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.Temporada", b =>
                {
                    b.Property<int>("TemporadaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemporadaID"));

                    b.Property<string>("NombreTemporada")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TemporadaID");

                    b.ToTable("Temporadas");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.TipsCultivo", b =>
                {
                    b.Property<int>("TipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipID"));

                    b.Property<int>("CultivoID")
                        .HasColumnType("int");

                    b.Property<string>("DescripcionTip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("TipID");

                    b.HasIndex("CultivoID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("TipsCultivos");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.Usuario", b =>
                {
                    b.Property<int>("UsuarioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioID"));

                    b.Property<string>("ContrasenaHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EmailConfirmado")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RolUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TipoUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UsuarioID");

                    b.HasIndex("Correo")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.Blog", b =>
                {
                    b.Property<int>("BlogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogID"));

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagenURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BlogID");

                    b.HasIndex("Autor");

                    b.HasIndex("FechaPublicacion");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.Cliente", b =>
                {
                    b.Property<int>("ClienteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClienteID"));

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClienteID");

                    b.HasIndex("Correo");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.ComentarioBlog", b =>
                {
                    b.Property<int>("ComentarioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComentarioID"));

                    b.Property<int>("BlogID")
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaComentario")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("ComentarioID");

                    b.HasIndex("BlogID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("ComentariosBlog");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.Compra", b =>
                {
                    b.Property<int>("CompraID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompraID"));

                    b.Property<DateTime>("FechaCompra")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProveedorID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("CompraID");

                    b.HasIndex("FechaCompra");

                    b.HasIndex("ProveedorID");

                    b.ToTable("Compras");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.Contacto", b =>
                {
                    b.Property<int>("ContactoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactoID"));

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("FechaEnvio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ContactoID");

                    b.ToTable("Contacto");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.DetalleCompra", b =>
                {
                    b.Property<int>("DetalleCompraID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetalleCompraID"));

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int?>("CompraID")
                        .HasColumnType("int");

                    b.Property<decimal?>("CostoUnitario")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("ProductoID")
                        .HasColumnType("int");

                    b.HasKey("DetalleCompraID");

                    b.HasIndex("CompraID");

                    b.HasIndex("ProductoID");

                    b.ToTable("DetalleCompras");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.DetalleVenta", b =>
                {
                    b.Property<int>("DetalleVentaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetalleVentaID"));

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<decimal?>("PrecioVenta")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("ProductoID")
                        .HasColumnType("int");

                    b.Property<int?>("VentaID")
                        .HasColumnType("int");

                    b.HasKey("DetalleVentaID");

                    b.HasIndex("ProductoID");

                    b.HasIndex("VentaID");

                    b.ToTable("DetalleVentas");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.FAQ", b =>
                {
                    b.Property<int>("FAQID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FAQID"));

                    b.Property<string>("Pregunta")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Respuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FAQID");

                    b.ToTable("FAQ");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.GuiaCultivo", b =>
                {
                    b.Property<int>("GuiaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuiaID"));

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CultivoID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("datetime2");

                    b.HasKey("GuiaID");

                    b.HasIndex("CultivoID");

                    b.ToTable("GuiaCultivo");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.Kardex", b =>
                {
                    b.Property<int>("KardexID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KardexID"));

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<decimal?>("CostoUnitario")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("Debe")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("date");

                    b.Property<decimal?>("Haber")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("ProductoID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Promedio")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("Saldo")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("TipoMovimiento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("KardexID");

                    b.HasIndex("ProductoID", "Fecha");

                    b.ToTable("Kardex");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.Producto", b =>
                {
                    b.Property<int>("ProductoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductoID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagenURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Precio")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductoID");

                    b.HasIndex("Nombre");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.Proveedor", b =>
                {
                    b.Property<int>("ProveedorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProveedorID"));

                    b.Property<string>("Contacto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NombreEmpresa")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProveedorID");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.Venta", b =>
                {
                    b.Property<int>("VentaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VentaID"));

                    b.Property<int?>("ClienteID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaVenta")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("VentaID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("FechaVenta");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.ConfiguracionNotificacion", b =>
                {
                    b.HasOne("CropMonitor.Models.AppMovil.Usuario", "Usuario")
                        .WithOne("ConfiguracionNotificaciones")
                        .HasForeignKey("CropMonitor.Models.AppMovil.ConfiguracionNotificacion", "UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.CultivosTemporada", b =>
                {
                    b.HasOne("CropMonitor.Models.AppMovil.Cultivo", "Cultivo")
                        .WithMany("CultivosTemporadas")
                        .HasForeignKey("CultivoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CropMonitor.Models.AppMovil.Temporada", "Temporada")
                        .WithMany("CultivosTemporadas")
                        .HasForeignKey("TemporadaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cultivo");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.Favorito", b =>
                {
                    b.HasOne("CropMonitor.Models.AppMovil.Cultivo", "Cultivo")
                        .WithMany("Favoritos")
                        .HasForeignKey("CultivoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CropMonitor.Models.AppMovil.Usuario", "Usuario")
                        .WithMany("Favoritos")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cultivo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.LecturaSensor", b =>
                {
                    b.HasOne("CropMonitor.Models.AppMovil.Sensor", "Sensor")
                        .WithMany("LecturasSensores")
                        .HasForeignKey("SensorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.Modulo", b =>
                {
                    b.HasOne("CropMonitor.Models.AppMovil.Usuario", "Usuario")
                        .WithMany("Modulos")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.Notificacion", b =>
                {
                    b.HasOne("CropMonitor.Models.AppMovil.Cultivo", "Cultivo")
                        .WithMany("Notificaciones")
                        .HasForeignKey("CultivoID");

                    b.HasOne("CropMonitor.Models.AppMovil.Sensor", "Sensor")
                        .WithMany("Notificaciones")
                        .HasForeignKey("SensorID");

                    b.HasOne("CropMonitor.Models.AppMovil.Usuario", "Usuario")
                        .WithMany("Notificaciones")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cultivo");

                    b.Navigation("Sensor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.RecetasCultivo", b =>
                {
                    b.HasOne("CropMonitor.Models.AppMovil.Cultivo", "Cultivo")
                        .WithMany("RecetasCultivos")
                        .HasForeignKey("CultivoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CropMonitor.Models.AppMovil.Receta", "Receta")
                        .WithMany("RecetasCultivos")
                        .HasForeignKey("RecetaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cultivo");

                    b.Navigation("Receta");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.Sensor", b =>
                {
                    b.HasOne("CropMonitor.Models.AppMovil.Cultivo", "Cultivo")
                        .WithMany("Sensores")
                        .HasForeignKey("CultivoID");

                    b.HasOne("CropMonitor.Models.AppMovil.Modulo", "Modulo")
                        .WithMany("Sensores")
                        .HasForeignKey("ModuloID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cultivo");

                    b.Navigation("Modulo");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.TipsCultivo", b =>
                {
                    b.HasOne("CropMonitor.Models.AppMovil.Cultivo", "Cultivo")
                        .WithMany("TipsCultivos")
                        .HasForeignKey("CultivoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CropMonitor.Models.AppMovil.Usuario", "Usuario")
                        .WithMany("TipsCultivos")
                        .HasForeignKey("UsuarioID");

                    b.Navigation("Cultivo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.ComentarioBlog", b =>
                {
                    b.HasOne("CropMonitor.Models.WebApp.Blog", "Blog")
                        .WithMany("ComentariosBlog")
                        .HasForeignKey("BlogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CropMonitor.Models.AppMovil.Usuario", "Usuario")
                        .WithMany("ComentariosBlog")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Blog");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.Compra", b =>
                {
                    b.HasOne("CropMonitor.Models.WebApp.Proveedor", "Proveedor")
                        .WithMany("Compras")
                        .HasForeignKey("ProveedorID");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.DetalleCompra", b =>
                {
                    b.HasOne("CropMonitor.Models.WebApp.Compra", "Compra")
                        .WithMany("DetalleCompras")
                        .HasForeignKey("CompraID");

                    b.HasOne("CropMonitor.Models.WebApp.Producto", "Producto")
                        .WithMany("DetalleCompras")
                        .HasForeignKey("ProductoID");

                    b.Navigation("Compra");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.DetalleVenta", b =>
                {
                    b.HasOne("CropMonitor.Models.WebApp.Producto", "Producto")
                        .WithMany("DetalleVentas")
                        .HasForeignKey("ProductoID");

                    b.HasOne("CropMonitor.Models.WebApp.Venta", "Venta")
                        .WithMany("DetalleVentas")
                        .HasForeignKey("VentaID");

                    b.Navigation("Producto");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.GuiaCultivo", b =>
                {
                    b.HasOne("CropMonitor.Models.AppMovil.Cultivo", "Cultivo")
                        .WithMany("GuiaCultivos")
                        .HasForeignKey("CultivoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cultivo");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.Kardex", b =>
                {
                    b.HasOne("CropMonitor.Models.WebApp.Producto", "Producto")
                        .WithMany("Kardex")
                        .HasForeignKey("ProductoID");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.Venta", b =>
                {
                    b.HasOne("CropMonitor.Models.WebApp.Cliente", "Cliente")
                        .WithMany("Ventas")
                        .HasForeignKey("ClienteID");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.Cultivo", b =>
                {
                    b.Navigation("CultivosTemporadas");

                    b.Navigation("Favoritos");

                    b.Navigation("GuiaCultivos");

                    b.Navigation("Notificaciones");

                    b.Navigation("RecetasCultivos");

                    b.Navigation("Sensores");

                    b.Navigation("TipsCultivos");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.Modulo", b =>
                {
                    b.Navigation("Sensores");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.Receta", b =>
                {
                    b.Navigation("RecetasCultivos");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.Sensor", b =>
                {
                    b.Navigation("LecturasSensores");

                    b.Navigation("Notificaciones");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.Temporada", b =>
                {
                    b.Navigation("CultivosTemporadas");
                });

            modelBuilder.Entity("CropMonitor.Models.AppMovil.Usuario", b =>
                {
                    b.Navigation("ComentariosBlog");

                    b.Navigation("ConfiguracionNotificaciones")
                        .IsRequired();

                    b.Navigation("Favoritos");

                    b.Navigation("Modulos");

                    b.Navigation("Notificaciones");

                    b.Navigation("TipsCultivos");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.Blog", b =>
                {
                    b.Navigation("ComentariosBlog");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.Cliente", b =>
                {
                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.Compra", b =>
                {
                    b.Navigation("DetalleCompras");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.Producto", b =>
                {
                    b.Navigation("DetalleCompras");

                    b.Navigation("DetalleVentas");

                    b.Navigation("Kardex");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.Proveedor", b =>
                {
                    b.Navigation("Compras");
                });

            modelBuilder.Entity("CropMonitor.Models.WebApp.Venta", b =>
                {
                    b.Navigation("DetalleVentas");
                });
#pragma warning restore 612, 618
        }
    }
}
